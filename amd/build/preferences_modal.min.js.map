{"version":3,"file":"preferences_modal.min.js","sources":["../src/preferences_modal.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     core_group/newgroup\n * @class      PreferencesModal\n * @copyright  2017 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_events',\n        'core/fragment', 'core/ajax', 'core/notification', 'core/modal_save_cancel'],\n    function($, Str, ModalEvents, Fragment, Ajax, Notification, ModalSaveCancel) {\n\n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     * @param {Function} onCloseCallback\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var PreferencesModal = function(selector, contextid, onCloseCallback) {\n        this.contextid = contextid;\n        this.onCloseCallback = onCloseCallback;\n        this.tab = \"\";\n        this.init(selector);\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    PreferencesModal.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    PreferencesModal.prototype.contextid = -1;\n\n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    PreferencesModal.prototype.init = function(selector) {\n        var triggers = $(selector);\n\n        return Str.get_string('editpreferences', 'block_dash').then(function(title) {\n            return ModalSaveCancel.create({\n                title: title,\n                body: this.getBody(),\n                large: true,\n                show: false\n            });\n        }.bind(this)).then(function(modal) {\n            // Keep a reference to the modal.\n            this.modal = modal;\n\n            // Hide the modal footer since the form has its own save/cancel buttons\n            this.modal.getFooter().hide();\n\n            triggers.on('click', function(e) {\n                e.preventDefault();\n                this.modal.show();\n            }.bind(this));\n\n            // We want to reset the form every time it is opened.\n            this.modal.getRoot().on(ModalEvents.shown, function() {\n                this.modal.setBody(this.getBody());\n            }.bind(this));\n\n            this.modal.getRoot().on('change', '#id_config_preferences_layout', this.submitFormAjax.bind(this, false));\n\n            // We catch the modal save event, and use it to submit the form inside the modal.\n            // Triggering a form submission will give JS validation scripts a chance to check for errors.\n            this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n            // We also catch the form submit event and use it to submit the form with ajax.\n            this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this, true));\n\n            this.modal.getRoot().on(ModalEvents.bodyRendered, function() {\n                $(\"#fgroup_id_available_fields .felement > fieldset > div\").sortable({\n                    items: \".form-check-inline.fitem\",\n                    handle: \".drag-handle\",\n                    axis: \"y\"\n                });\n\n                this.initSelect2();\n            }.bind(this));\n\n            this.modal.getRoot().on(ModalEvents.hidden, function(e) {\n                // Prevent \"changes may be lost\" popup.\n                window.onbeforeunload = null;\n                if (this.onCloseCallback) {\n                    this.onCloseCallback(e);\n                }\n            }.bind(this));\n\n            this.modal.getRoot().on('click', '[data-action=change-tab]', (e) => {\n                this.changeTab($(e.target).data('tab'));\n            });\n\n            return this.modal;\n        }.bind(this));\n    };\n\n    PreferencesModal.prototype.changeTab = function(tab) {\n        this.tab = tab;\n        this.submitFormAjax(false);\n    };\n\n    /**\n     * Get modal body content.\n     * @method getBody\n     * @param {Object} formdata\n     * @private\n     * @return {Promise}\n     */\n    PreferencesModal.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n\n        // Get the content of the modal.\n        var params = {\n            jsonformdata: JSON.stringify(formdata),\n            tab: this.tab\n        };\n        return Fragment.loadFragment('block_dash', 'block_preferences_form', this.contextid, params);\n    };\n\n    /**\n     * Form submission handler.\n     * @method handleFormSubmissionResponse\n     * @param {Object} formData\n     * @param {Boolean} closeWhenDone\n     * @param {Object} response\n     * @private\n     */\n    PreferencesModal.prototype.handleFormSubmissionResponse = function(formData, closeWhenDone, response) {\n        if (response.validationerrors || !closeWhenDone) {\n            this.modal.setBody(this.getBody(formData));\n        } else if (closeWhenDone) {\n            this.modal.hide();\n        }\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @param {Object} data\n     * @private\n     */\n    PreferencesModal.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {boolean} closeWhenDone If true modal will close after successful submission.\n     * @param {Event} e Form submission event.\n     */\n    PreferencesModal.prototype.submitFormAjax = function(closeWhenDone, e) {\n        // We don't want to do a real form submission.\n        if (e) {\n            e.preventDefault();\n        }\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        var invalid = $.merge(\n            this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n            this.modal.getRoot().find('.error')\n        );\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return;\n        }\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'block_dash_submit_preferences_form',\n            args: {\n                contextid: this.contextid,\n                jsonformdata: JSON.stringify(formData)\n            },\n            done: this.handleFormSubmissionResponse.bind(this, formData, closeWhenDone),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }])[0].fail(Notification.exception);\n    };\n\n    PreferencesModal.prototype.getModal = function() {\n        return this.modal;\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    PreferencesModal.prototype.submitForm = function(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    PreferencesModal.prototype.initSelect2 = function() {\n        this.modal.getRoot().find('.select2-form select').each(function(index, element) {\n            let placeholder = null;\n            if ($(element).find(\"option[value='-1']\")) {\n                placeholder = {\n                    id: '-1', // The value of the option\n                    text: $(element).find(\"option[value='-1']\").text()\n                };\n            }\n            $(element).select2({\n                dropdownParent: $(this).parent(),\n                allowClear: true,\n                theme: 'bootstrap4',\n                placeholder: placeholder\n            }).on('select2:unselecting', function() {\n                $(this).data('unselecting', true);\n            }).on('select2:opening', function(e) {\n                if ($(this).data('unselecting')) {\n                    $(this).removeData('unselecting');\n                    e.preventDefault();\n                }\n            });\n        });\n    };\n\n    return PreferencesModal;\n});\n"],"names":["define","$","Str","ModalEvents","Fragment","Ajax","Notification","ModalSaveCancel","PreferencesModal","selector","contextid","onCloseCallback","tab","init","prototype","modal","triggers","get_string","then","title","create","body","this","getBody","large","show","bind","getFooter","hide","on","e","preventDefault","getRoot","shown","setBody","submitFormAjax","save","submitForm","bodyRendered","sortable","items","handle","axis","initSelect2","hidden","window","onbeforeunload","changeTab","target","data","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","formData","closeWhenDone","response","validationerrors","handleFormSubmissionFailure","invalid","merge","find","length","first","focus","serialize","call","methodname","args","done","fail","exception","getModal","submit","each","index","element","placeholder","id","text","select2","dropdownParent","parent","allowClear","theme","removeData"],"mappings":";;;;;;;;AAQAA,sCAAO,CAAC,SAAU,WAAY,oBACtB,gBAAiB,YAAa,oBAAqB,2BACvD,SAASC,EAAGC,IAAKC,YAAaC,SAAUC,KAAMC,aAAcC,qBAWxDC,iBAAmB,SAASC,SAAUC,UAAWC,sBAC5CD,UAAYA,eACZC,gBAAkBA,qBAClBC,IAAM,QACNC,KAAKJ,kBAOdD,iBAAiBM,UAAUC,MAAQ,KAMnCP,iBAAiBM,UAAUJ,WAAa,EASxCF,iBAAiBM,UAAUD,KAAO,SAASJ,cACnCO,SAAWf,EAAEQ,iBAEVP,IAAIe,WAAW,kBAAmB,cAAcC,KAAK,SAASC,cAC1DZ,gBAAgBa,OAAO,CAC1BD,MAAOA,MACPE,KAAMC,KAAKC,UACXC,OAAO,EACPC,MAAM,KAEZC,KAAKJ,OAAOJ,KAAK,SAASH,mBAEnBA,MAAQA,WAGRA,MAAMY,YAAYC,OAEvBZ,SAASa,GAAG,QAAS,SAASC,GAC1BA,EAAEC,sBACGhB,MAAMU,QACbC,KAAKJ,YAGFP,MAAMiB,UAAUH,GAAG1B,YAAY8B,MAAO,gBAClClB,MAAMmB,QAAQZ,KAAKC,YAC1BG,KAAKJ,YAEFP,MAAMiB,UAAUH,GAAG,SAAU,gCAAiCP,KAAKa,eAAeT,KAAKJ,MAAM,SAI7FP,MAAMiB,UAAUH,GAAG1B,YAAYiC,KAAMd,KAAKe,WAAWX,KAAKJ,YAE1DP,MAAMiB,UAAUH,GAAG,SAAU,OAAQP,KAAKa,eAAeT,KAAKJ,MAAM,SAEpEP,MAAMiB,UAAUH,GAAG1B,YAAYmC,aAAc,WAC9CrC,EAAE,0DAA0DsC,SAAS,CACjEC,MAAO,2BACPC,OAAQ,eACRC,KAAM,WAGLC,eACPjB,KAAKJ,YAEFP,MAAMiB,UAAUH,GAAG1B,YAAYyC,OAAQ,SAASd,GAEjDe,OAAOC,eAAiB,KACpBxB,KAAKX,sBACAA,gBAAgBmB,IAE3BJ,KAAKJ,YAEFP,MAAMiB,UAAUH,GAAG,QAAS,4BAA6BC,SACrDiB,UAAU9C,EAAE6B,EAAEkB,QAAQC,KAAK,WAG7B3B,KAAKP,OACdW,KAAKJ,QAGXd,iBAAiBM,UAAUiC,UAAY,SAASnC,UACvCA,IAAMA,SACNuB,gBAAe,IAUxB3B,iBAAiBM,UAAUS,QAAU,SAAS2B,eAClB,IAAbA,WACPA,SAAW,QAIXC,OAAS,CACTC,aAAcC,KAAKC,UAAUJ,UAC7BtC,IAAKU,KAAKV,YAEPR,SAASmD,aAAa,aAAc,yBAA0BjC,KAAKZ,UAAWyC,SAWzF3C,iBAAiBM,UAAU0C,6BAA+B,SAASC,SAAUC,cAAeC,UACpFA,SAASC,mBAAqBF,mBACzB3C,MAAMmB,QAAQZ,KAAKC,QAAQkC,WACzBC,oBACF3C,MAAMa,QASnBpB,iBAAiBM,UAAU+C,4BAA8B,SAASZ,WAGzDlC,MAAMmB,QAAQZ,KAAKC,QAAQ0B,QAWpCzC,iBAAiBM,UAAUqB,eAAiB,SAASuB,cAAe5B,GAE5DA,GACAA,EAAEC,qBAIF+B,QAAU7D,EAAE8D,MACZzC,KAAKP,MAAMiB,UAAUgC,KAAK,yBAC1B1C,KAAKP,MAAMiB,UAAUgC,KAAK,cAI1BF,QAAQG,OACRH,QAAQI,QAAQC,iBAKhBV,SAAWnC,KAAKP,MAAMiB,UAAUgC,KAAK,QAAQI,YAGjD/D,KAAKgE,KAAK,CAAC,CACPC,WAAY,qCACZC,KAAM,CACF7D,UAAWY,KAAKZ,UAChB0C,aAAcC,KAAKC,UAAUG,WAEjCe,KAAMlD,KAAKkC,6BAA6B9B,KAAKJ,KAAMmC,SAAUC,eAC7De,KAAMnD,KAAKuC,4BAA4BnC,KAAKJ,KAAMmC,aAClD,GAAGgB,KAAKnE,aAAaoE,aAG7BlE,iBAAiBM,UAAU6D,SAAW,kBAC3BrD,KAAKP,OAUhBP,iBAAiBM,UAAUuB,WAAa,SAASP,GAC7CA,EAAEC,sBACGhB,MAAMiB,UAAUgC,KAAK,QAAQY,UAGtCpE,iBAAiBM,UAAU6B,YAAc,gBAChC5B,MAAMiB,UAAUgC,KAAK,wBAAwBa,MAAK,SAASC,MAAOC,aAC/DC,YAAc,KACd/E,EAAE8E,SAASf,KAAK,wBAChBgB,YAAc,CACVC,GAAI,KACJC,KAAMjF,EAAE8E,SAASf,KAAK,sBAAsBkB,SAGpDjF,EAAE8E,SAASI,QAAQ,CACfC,eAAgBnF,EAAEqB,MAAM+D,SACxBC,YAAY,EACZC,MAAO,aACPP,YAAaA,cACdnD,GAAG,uBAAuB,WACzB5B,EAAEqB,MAAM2B,KAAK,eAAe,MAC7BpB,GAAG,mBAAmB,SAASC,GAC1B7B,EAAEqB,MAAM2B,KAAK,iBACbhD,EAAEqB,MAAMkE,WAAW,eACnB1D,EAAEC,yBAMXvB"}